/*
 * Copyright (c) 2011-2013, Peter Abeles. All Rights Reserved.
 *
 * This file is part of BoofCV (http://boofcv.org).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package boofcv.alg.filter.binary;

import boofcv.misc.AutoTypeImage;
import boofcv.misc.CodeGeneratorBase;

import java.io.FileNotFoundException;


/**
 * @author Peter Abeles
 */
public class GenerateThresholdImageOps extends CodeGeneratorBase {
	String className = "ThresholdImageOps";

	@Override
	public void generate() throws FileNotFoundException {
		printPreamble();

		printAll(AutoTypeImage.F32);
		printAll(AutoTypeImage.F64);
		printAll(AutoTypeImage.U8);
		printAll(AutoTypeImage.S16);
		printAll(AutoTypeImage.U16);
		printAll(AutoTypeImage.S32);

		out.print("\n" +
				"}\n");
	}

	private void printPreamble() throws FileNotFoundException {
		setOutputFile(className);
		out.print("import boofcv.alg.InputSanityCheck;\n" +
				"import boofcv.misc.BoofMiscOps;\n" +
				"import boofcv.struct.image.*;\n" +
				"\n" +
				"/**\n" +
				" * <p>\n" +
				" * Operations for thresholding images and converting them into a binary image.\n" +
				" * </p>\n" +
				" *\n" +
				" * <p>\n" +
				" * WARNING: Do not modify.  Automatically generated by {@link boofcv.alg.filter.binary.GenerateThresholdImageOps}.\n" +
				" * </p>\n" +
				" *\n" +
				" * @author Peter Abeles\n" +
				" */\n" +
				"public class "+className+" {\n\n");

	}

	public void printAll( AutoTypeImage imageIn ) {
		printThreshold(imageIn);
	}

	public void printThreshold( AutoTypeImage imageIn ) {
		out.print("\t/**\n" +
				"\t * Applies a global threshold across the whole image.  Pixels which are\n" +
				"\t * considered in the set defined by the threshold are set to 1, all others\n" +
				"\t * are set to zero.  If the down flag is set to true then the inlier set\n" +
				"\t * is defined as <= to the the threshold and >= if true.\n" +
				"\t *\n" +
				"\t * @param input Input image. Not modified.\n" +
				"\t * @param output Binary output image. If null a new image will be declared. Modified.\n" +
				"\t * @param threshold threshold value.\n" +
				"\t * @param down If true inliers are below the threshold and false they are above the threshold.\n" +
				"\t * @return Output image.\n" +
				"\t */\n" +
				"\tpublic static ImageUInt8 threshold( "+imageIn.getImageName()+" input , ImageUInt8 output ,\n" +
				"\t\t\t\t\t\t\t\t\t\t"+imageIn.getSumType()+" threshold , boolean down )\n" +
				"\t{\n" +
				"\t\toutput = InputSanityCheck.checkDeclare(input,output,ImageUInt8.class);\n" +
				"\n" +
				"\t\tif( down ) {\n" +
				"\t\t\tfor( int y = 0; y < input.height; y++ ) {\n" +
				"\t\t\t\tint indexIn = input.startIndex + y*input.stride;\n" +
				"\t\t\t\tint indexOut = output.startIndex + y*output.stride;\n" +
				"\n" +
				"\t\t\t\tint end = indexIn + input.width;\n" +
				"\n" +
				"\t\t\t\tfor( ; indexIn < end; indexIn++ , indexOut++ ) {\n" +
				"\t\t\t\t\tif( (input.data[indexIn]"+imageIn.getBitWise()+") <= threshold )\n" +
				"\t\t\t\t\t\toutput.data[indexOut] = 1;\n" +
				"\t\t\t\t\telse\n" +
				"\t\t\t\t\t\toutput.data[indexOut] = 0;\n" +
				"\t\t\t\t}\n" +
				"\t\t\t}\n" +
				"\t\t} else {\n" +
				"\t\t\tfor( int y = 0; y < input.height; y++ ) {\n" +
				"\t\t\t\tint indexIn = input.startIndex + y*input.stride;\n" +
				"\t\t\t\tint indexOut = output.startIndex + y*output.stride;\n" +
				"\n" +
				"\t\t\t\tint end = indexIn + input.width;\n" +
				"\n" +
				"\t\t\t\tfor( ; indexIn < end; indexIn++ , indexOut++ ) {\n" +
				"\t\t\t\t\tif( (input.data[indexIn]"+imageIn.getBitWise()+") >= threshold )\n" +
				"\t\t\t\t\t\toutput.data[indexOut] = 1;\n" +
				"\t\t\t\t\telse\n" +
				"\t\t\t\t\t\toutput.data[indexOut] = 0;\n" +
				"\t\t\t\t}\n" +
				"\t\t\t}\n" +
				"\t\t}\n" +
				"\n" +
				"\t\treturn output;\n" +
				"\t}\n\n");
	}

	public static void main( String args[] ) throws FileNotFoundException {
		GenerateThresholdImageOps app = new GenerateThresholdImageOps();
		app.generate();
	}
}
