/*
 * Copyright (c) 2011-2013, Peter Abeles. All Rights Reserved.
 *
 * This file is part of BoofCV (http://boofcv.org).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package boofcv.alg.filter.binary;

import boofcv.alg.InputSanityCheck;
import boofcv.struct.image.*;

/**
 * <p>
 * Operations for thresholding images and converting them into a binary image.
 * </p>
 *
 * <p>
 * WARNING: Do not modify.  Automatically generated by {@link boofcv.alg.filter.binary.GenerateThresholdImageOps}.
 * </p>
 *
 * @author Peter Abeles
 */
public class ThresholdImageOps {

	/**
	 * Applies a global threshold across the whole image.  Pixels which are
	 * considered in the set defined by the threshold are set to 1, all others
	 * are set to zero.  If the down flag is set to true then the inlier set
	 * is defined as <= to the the threshold and >= if true.
	 *
	 * @param input Input image. Not modified.
	 * @param output Binary output image. If null a new image will be declared. Modified.
	 * @param threshold threshold value.
	 * @param down If true inliers are below the threshold and false they are above the threshold.
	 * @return Output image.
	 */
	public static ImageUInt8 threshold( ImageFloat32 input , ImageUInt8 output ,
										float threshold , boolean down )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageUInt8.class);

		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]) <= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]) >= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		}

		return output;
	}

	/**
	 * Applies a global threshold across the whole image.  Pixels which are
	 * considered in the set defined by the threshold are set to 1, all others
	 * are set to zero.  If the down flag is set to true then the inlier set
	 * is defined as <= to the the threshold and >= if true.
	 *
	 * @param input Input image. Not modified.
	 * @param output Binary output image. If null a new image will be declared. Modified.
	 * @param threshold threshold value.
	 * @param down If true inliers are below the threshold and false they are above the threshold.
	 * @return Output image.
	 */
	public static ImageUInt8 threshold( ImageFloat64 input , ImageUInt8 output ,
										double threshold , boolean down )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageUInt8.class);

		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]) <= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]) >= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		}

		return output;
	}

	/**
	 * Applies a global threshold across the whole image.  Pixels which are
	 * considered in the set defined by the threshold are set to 1, all others
	 * are set to zero.  If the down flag is set to true then the inlier set
	 * is defined as <= to the the threshold and >= if true.
	 *
	 * @param input Input image. Not modified.
	 * @param output Binary output image. If null a new image will be declared. Modified.
	 * @param threshold threshold value.
	 * @param down If true inliers are below the threshold and false they are above the threshold.
	 * @return Output image.
	 */
	public static ImageUInt8 threshold( ImageUInt8 input , ImageUInt8 output ,
										int threshold , boolean down )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageUInt8.class);

		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]& 0xFF) <= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]& 0xFF) >= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		}

		return output;
	}

	/**
	 * Applies a global threshold across the whole image.  Pixels which are
	 * considered in the set defined by the threshold are set to 1, all others
	 * are set to zero.  If the down flag is set to true then the inlier set
	 * is defined as <= to the the threshold and >= if true.
	 *
	 * @param input Input image. Not modified.
	 * @param output Binary output image. If null a new image will be declared. Modified.
	 * @param threshold threshold value.
	 * @param down If true inliers are below the threshold and false they are above the threshold.
	 * @return Output image.
	 */
	public static ImageUInt8 threshold( ImageSInt16 input , ImageUInt8 output ,
										int threshold , boolean down )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageUInt8.class);

		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]) <= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]) >= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		}

		return output;
	}

	/**
	 * Applies a global threshold across the whole image.  Pixels which are
	 * considered in the set defined by the threshold are set to 1, all others
	 * are set to zero.  If the down flag is set to true then the inlier set
	 * is defined as <= to the the threshold and >= if true.
	 *
	 * @param input Input image. Not modified.
	 * @param output Binary output image. If null a new image will be declared. Modified.
	 * @param threshold threshold value.
	 * @param down If true inliers are below the threshold and false they are above the threshold.
	 * @return Output image.
	 */
	public static ImageUInt8 threshold( ImageUInt16 input , ImageUInt8 output ,
										int threshold , boolean down )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageUInt8.class);

		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]& 0xFFFF) <= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]& 0xFFFF) >= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		}

		return output;
	}

	/**
	 * Applies a global threshold across the whole image.  Pixels which are
	 * considered in the set defined by the threshold are set to 1, all others
	 * are set to zero.  If the down flag is set to true then the inlier set
	 * is defined as <= to the the threshold and >= if true.
	 *
	 * @param input Input image. Not modified.
	 * @param output Binary output image. If null a new image will be declared. Modified.
	 * @param threshold threshold value.
	 * @param down If true inliers are below the threshold and false they are above the threshold.
	 * @return Output image.
	 */
	public static ImageUInt8 threshold( ImageSInt32 input , ImageUInt8 output ,
										int threshold , boolean down )
	{
		output = InputSanityCheck.checkDeclare(input,output,ImageUInt8.class);

		if( down ) {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]) <= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		} else {
			for( int y = 0; y < input.height; y++ ) {
				int indexIn = input.startIndex + y*input.stride;
				int indexOut = output.startIndex + y*output.stride;

				int end = indexIn + input.width;

				for( ; indexIn < end; indexIn++ , indexOut++ ) {
					if( (input.data[indexIn]) >= threshold )
						output.data[indexOut] = 1;
					else
						output.data[indexOut] = 0;
				}
			}
		}

		return output;
	}


}
